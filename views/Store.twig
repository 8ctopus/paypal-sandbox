{% set title = "Store" %}
{% extends "Base.twig" %}
{% block css %}
<style type="text/css">

article {
  margin-top: 2rem;
  white-space: wrap;
}

details {
  padding: 0.5rem;
  border: 1px solid rgba(255, 255, 255, 0.1);
}

details > summary {
  cursor: pointer;
  font-size: 1.2rem;
  font-weight: bold;
  color: gray !important;
}

code {
  white-space: pre-wrap;
}

input {
  width: 40% !important;
}

button {
  margin-bottom: 1rem;
}

</style>
{% endblock %}
{% block head %}
<script type="module">

document.addEventListener('DOMContentLoaded', () => {
  const buttons = document.querySelectorAll('article#orders > button');

  buttons.forEach((button) => {
    button.addEventListener('click', createOrder);
  });

  document.querySelector('button#createProduct').addEventListener('click', () => {
    createProduct();
    listProducts();
  });

  document.querySelector('button#createPlan').addEventListener('click', () => {
    createPlan();
    listPlans();
  });

  document.querySelector('button#createSubscription').addEventListener('click', createSubscription);

  document.querySelector('button#createHook').addEventListener('click', () => {
    createHook();
    listHooks();
  });

  document.querySelector('button#deleteHook').addEventListener('click', () => {
    deleteHook();
    listHooks();
  });

  document.querySelector('button#simulateHook').addEventListener('click', simulateHook);

  listProducts();
  listPlans();
  listHooks();
});

async function createOrder(event) {
  const component = 'article#orders details code';

  const url = document.querySelector('article#orders input#returnUrl').value;

  if (!url) {
    log(component, 'return url required', true);
    return;
  }

  const button = event.target;

  const response = await fetch('{{ createOrderUrl }}', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      amount: button.dataset.amount,
      currency: button.dataset.currency,
      description: button.textContent,
      successUrl: url + '/order-success/',
      cancelUrl: url + '/order-cancel/',
    }),
  });

  if (!response.ok) {
    log(component, await response.text(), true);
    return;
  }

  const json = await response.json();

  log(component, json.result, false);

  window.location = 'https://www.sandbox.paypal.com/checkoutnow?token=' + json.id;
}

async function listProducts()
{
  const response = await fetch('{{ productsUrl }}');

  const component = 'article#products details code';

  const text = await response.text();

  if (!response.ok) {
    log(component, text, true);
    return;
  }

  log(component, text, false);

  const json = JSON.parse(text);

  if (json[0] !== undefined) {
    document.querySelector('input#productId').value = json[0].id;
  }
}

async function createProduct(event) {
  const response = await fetch('{{ createProductUrl }}', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      name: document.querySelector('article#products input#name').value,
      description: document.querySelector('article#products input#description').value,
      type: document.querySelector('article#products input#type').value,
      category: document.querySelector('article#products input#category').value,
      homeUrl: document.querySelector('article#products input#homeUrl').value,
      imageUrl: document.querySelector('article#products input#imageUrl').value,
    }),
  });

  const component = 'article#products details code';

  if (!response.ok) {
    log(component, await response.text(), true);
    return;
  }
}

async function listPlans() {
  const response = await fetch('{{ plansUrl }}');

  const component = 'article#plans details code';

  const text = await response.text();

  if (!response.ok) {
    log(component, text, true);
    return;
  }

  log(component, text, false);

  const json = JSON.parse(text);

  if (json[0] !== undefined) {
    document.querySelector('input#planId').value = json[0].id;
  }
}

async function createPlan(event) {
  const component = 'article#plans details code';

  const product = document.querySelector('article#plans input#productId').value;

  if (!product) {
    log(component, 'product ID required', true);
    return;
  }

  const response = await fetch('{{ createPlanUrl }}', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      product: product,
      name: document.querySelector('article#plans input#name').value,
      description: document.querySelector('article#plans input#description').value,
      currency: document.querySelector('article#plans input#currency').value,
      price: document.querySelector('article#plans input#price').value,
      setupFee: document.querySelector('article#plans input#setupFee').value,
    }),
  });

  if (!response.ok) {
    log(component, await response.text(), true);
    return;
  }

  log(component, await response.json(), false);
}

async function createSubscription(event) {
  const planId = document.querySelector('article#subscriptions input#planId').value;
  const url = document.querySelector('article#subscriptions input#returnUrl').value;
  const component = 'article#subscriptions details code';

  if (!planId) {
    log(component, 'plan id required', true);
    return;
  }

  if (!url) {
    log(component, 'return url required', true);
    return;
  }

  const response = await fetch('{{ createSubscriptionUrl }}', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      planId: planId,
      successUrl: url + '/subscription-success/',
      cancelUrl: url + '/subscription-cancel/',
    }),
  });

  if (!response.ok) {
    log(component, await response.text(), true);
    return;
  }

  const json = await response.json();

  log(component, json.result, false);

  for (const link of json.links) {
    if (link.rel === 'approve') {
      window.location = link.href;
    }
  }
}

async function listHooks() {
  const response = await fetch('{{ hooksUrl }}');

  const component = 'article#hooks details code';

  const text = await response.text();

  if (!response.ok) {
    log(component, text, true);
    return;
  }

  log(component, text, false);

  const json = JSON.parse(text);

  if (json[0] !== undefined) {
    document.querySelector('article#hooks details#delete input#hookId').value = json[0].id;
    document.querySelector('article#hooks details#simulate input#hookId').value = json[0].id;

    const url = new URL(json[0].url);
    const returnUrl = url.protocol + '//' + url.hostname;

    document.querySelector('article#orders input#returnUrl').value = returnUrl;
    document.querySelector('article#subscriptions input#returnUrl').value = returnUrl;
  }
}

async function createHook(event) {
  const component = 'article#hooks details code';

  const url = document.querySelector('input#hookUrl').value + '/hooks/notify/';

  if (!url) {
    log(component, 'webhook url required', true);
    return;
  }

  const response = await fetch('{{ createHookUrl }}', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      'url': url,
      'eventTypes': [
        // a payment on a subscription was made
        'PAYMENT.SALE.COMPLETED',
        // a payment on a subscription was refunded
        'PAYMENT.SALE.REFUNDED',
        // a payment on a subscription was reversed
        'PAYMENT.SALE.REVERSED',

        // user starts subscription process - it's not completed yet!
        'BILLING.SUBSCRIPTION.CREATED',
        // either user just subscribed to a plan - no payment yet or subscription resumed
        'BILLING.SUBSCRIPTION.ACTIVATED',
        // subscription expired
        'BILLING.SUBSCRIPTION.EXPIRED',
        // user subscription was canceled (from PayPal admin, REST api or from user side inside account)
        'BILLING.SUBSCRIPTION.CANCELLED',
        // subscription paused
        'BILLING.SUBSCRIPTION.SUSPENDED',
        // payment failed on subscription
        'BILLING.SUBSCRIPTION.PAYMENT.FAILED',
        // subscription is updated - how to do that? (like suspended, change of state? no)
        'BILLING.SUBSCRIPTION.UPDATED',

        //'PAYMENT.AUTHORIZATION.CREATED',
        //'PAYMENT.AUTHORIZATION.VOIDED',
        //'PAYMENT.CAPTURE.COMPLETED',
      ]
    }),
  });

  if (!response.ok) {
    log(component, await response.text(), true);
    return;
  }

  log(component, await response.json(), false);
}

async function deleteHook(event) {
  const component = 'article#hooks details code';

  const id = document.querySelector('article#hooks details#delete input#hookId').value;

  if (!id) {
    log(component, 'webhook id required', true);
    return;
  }

  const response = await fetch('{{ deleteHookUrl }}', {
    method: 'DELETE',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      'id': id,
    }),
  });

  if (!response.ok) {
    log(component, await response.text(), true);
    return;
  }

  log(component, '', false);
}

async function simulateHook(event) {
  const component = 'article#hooks details code';

  const id = document.querySelector('article#hooks details#simulate input#hookId').value;

  if (!id) {
    log(component, 'webhook id required', true);
    return;
  }

  const response = await fetch('{{ simulateHookUrl }}', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      'id': id,
      'eventType': document.querySelector('article#hooks details#simulate input#eventType').value,
    }),
  });

  if (!response.ok) {
    log(component, await response.text(), true);
    return;
  }

  log(component, '', false);
}

function log(component, message, logToConsole) {
  if (logToConsole) {
    console.log(message);
  }

  document.querySelector(component).innerText = message;
}

</script>
{% endblock %}
{% block body %}
<div class="container">
  <article id="orders" class="component">
    <h1> orders (one-time payments) </h1>
    <input id="returnUrl" type="text" placeholder="return url" />
    <small>return url</small>
    <button data-currency="USD" data-amount=3>Chocolate Ice Cream $3</button>
    <button data-currency="USD" data-amount=3>Vanilla Ice Cream $3</button>
    <details>
      <summary>details</summary>
      <code></code>
    </details>
  </article>

  <article id="subscriptions" class="component">
    <h1> subscriptions (auto-renewing payments) </h1>
    <p> To test subscriptions, you first need to create a product, then a plan that uses that product.<br>
    Once you have a plan, you can test the subscription process. </p>
    <input id="planId" type="text" placeholder="plan Id" />
    <small>plan id</small>
    <input id="returnUrl" type="text" placeholder="return url" />
    <small>return url</small>
    <button id="createSubscription">Subscribe</button>
    <details>
      <summary>details</summary>
      <code></code>
    </details>
  </article>

  <article id="products" class="component">
    <h1> products </h1>
    <details>
      <summary>list</summary>
      <code></code>
    </details>
    <details>
      <summary>create</summary>
      <p><b> Once created a product cannot be deleted. </b></p>
      <form>
        <fieldset>
          <input id="name" type="text" placeholder="name" value="Copilot" />
          <small>name</small>
          <input id="description" type="text" placeholder="description" value="Your AI assistant" />
          <small>description</small>
          <input id="type" type="text" placeholder="type" value="service" />
          <small>type</small>
          <input id="category" type="text" placeholder="category" value="software" />
          <small>category</small>
          <input id="homeUrl" type="text" placeholder="home url" value="https://copilot.github.com" />
          <small>home url</small>
          <input id="imageUrl" type="text" placeholder="home url" value="https://images.app.goo.gl/FmyETr4zev1odZ5e7" />
          <small>image url</small>
        </fieldset>
        <button id="createProduct">create product</button>
      </form>
    </details>
  </article>

  <article id="plans" class="component">
    <h1> plans </h1>
    <details>
      <summary>list</summary>
      <code></code>
    </details>
    <details>
      <summary>create</summary>
      <p><b> Once created a plan cannot be deleted. </b></p>
      <form>
        <input id="productId" type="text" placeholder="product Id" />
        <small>product id</small>
        <input id="name" type="text" placeholder="name" value="Copilot one user" />
        <small>name</small>
        <input id="description" type="text" placeholder="description" value="Copilot for one user" />
        <small>description</small>
        <input id="currency" type="text" placeholder="currency" value="USD" />
        <small>currency</small>
        <input id="price" type="number" placeholder="price" value=3.00 />
        <small>price</small>
        <input id="setupFee" type="number" placeholder="setup fee" value=10.00 />
        <small>setup fee</small>
        <button id="createPlan">create plan</button>
      </form>
    </details>
  </article>

  <article id="hooks" class="component">
    <h1> webhooks </h1>
    <p> To receive notifications when PayPal events occur (new payments, subscriptions, etc...), you need to setup a webhook. For the webhook to be received on your development machine, you will need to use ngrok or a similar tool. The command for ngrok is `ngrok http 80`</p>
    <details>
      <summary>list</summary>
      <code></code>
    </details>
    <details>
      <summary>create</summary>
      <input id="hookUrl" type="text" placeholder="webhook url" />
      <small>ngrok url eg. https://5753-31-218-65-185.ngrok-free.app</small>
      <button id="createHook">create</button>
    </details>
    <details id="delete">
      <summary>delete</summary>
      <input id="hookId" type="text" placeholder="webhook id" />
      <small>hook id</small>
      <button id="deleteHook">delete</button>
    </details>
    <details id="simulate">
      <summary>simulate</summary>
      <input id="hookId" type="text" placeholder="webhook id" />
      <small>hook id</small>
      <input id="eventType" type="text" placeholder="event type" value="BILLING.SUBSCRIPTION.CREATED" />
      <small>event type</small>
      <button id="simulateHook">simulate</button>
    </details>
  </article>
</div>
{% endblock %}
