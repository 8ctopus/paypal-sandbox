{% set title = "Store" %}
{% extends "Base.twig" %}
{% block css %}
<style type="text/css">

article#subscription {
  margin-top: 2rem;
}

details {
  margin-top: 1rem;
}

code {
  white-space: pre-wrap;
}

input {
  width: 40% !important;
}

</style>
{% endblock %}
{% block head %}
<script type="module">

document.addEventListener('DOMContentLoaded', () => {
  const buttons = document.querySelectorAll('article#order > button');

  buttons.forEach((button) => {
    button.addEventListener('click', createOrder);
  });

  document.querySelector('button#createProduct').addEventListener('click', () => {
    createProduct();
    listProducts();
  });

  document.querySelector('button#createPlan').addEventListener('click', () => {
    createPlan();
    listPlans();
  });

  document.querySelector('button#createSubscription').addEventListener('click', createSubscription);

  listProducts();
  listPlans();
  listHooks();
});

async function createOrder(event) {
  const button = event.target;

  const response = await fetch({{ createOrderUrl }}, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      amount: button.dataset.amount,
      currency: button.dataset.currency,
      description: button.textContent,
    }),
  });

  const component = 'article#order details code';

  if (!response.ok) {
    log(component, await response.text(), true);
    return;
  }

  const json = await response.json();

  log(component, json.result, false);

  window.location = json.redirect;
}

async function listProducts()
{
  const response = await fetch({{ productsUrl }});

  const component = 'article#products details code';

  const text = await response.text();

  if (!response.ok) {
    log(component, text, true);
    return;
  }

  log(component, text, false);

  const json = JSON.parse(text);

  document.querySelector('input#productId').value = json[0].id;
}

async function createProduct(event) {
  const response = await fetch({{ createProductUrl }}, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      name: 'Copilot',
      description: 'Copilot helps you write code faster',
      type: 'service',
      category: 'software',
      homeUrl: 'https://copilot.github.com',
      imageUrl: 'https://copilot.github.com/copilot.png',
    }),
  });

  const component = 'article#products details code';

  if (!response.ok) {
    log(component, await response.text(), true);
    return;
  }
}

async function listPlans() {
  const response = await fetch({{ plansUrl }});

  const component = 'article#plans details code';

  const text = await response.text();

  if (!response.ok) {
    log(component, text, true);
    return;
  }

  log(component, text, false);

  const json = JSON.parse(text);

  document.querySelector('input#planId').value = json[0].id;
}

async function createPlan(event) {
  const component = 'article#plans details code';

  const product = document.querySelector('input#productId').value;

  if (!product) {
    log(component, 'product ID required', true);
    return;
  }

  const response = await fetch({{ createPlanUrl }}, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      product: product,
      name: 'Single user',
      description: 'Copilot for a single user',
      currency: 'USD',
      price: 3.00,
      setupFee: 10.00,
    }),
  });

  if (!response.ok) {
    log(component, await response.text(), true);
    return;
  }

  log(component, await response.json(), false);
}

async function createSubscription(event) {
  const button = event.target;

  const response = await fetch({{ createSubscriptionUrl }}, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      planId: 'x',
      successUrl: 'http://localhost/subscription/success/',
      cancelUrl: 'http://localhost/subscription/cancel/',
    }),
  });

  const component = 'article#subscription textarea';

  if (!response.ok) {
    log(component, await response.text(), true);
    return;
  }

  const json = await response.json();

  log(component, json.result, false);

  window.location = json.redirect;
}

async function listHooks() {
  const response = await fetch({{ hooksUrl }});

  const component = 'article#hooks details code';

  const text = await response.text();

  if (!response.ok) {
    log(component, text, true);
    return;
  }

  log(component, text, false);
}

async function createHook(event) {
  const component = 'article#hooks details code';

  const url = document.querySelector('input#hookUrl').value;

  if (!url) {
    log(component, 'hook url required', true);
    return;
  }

  const response = await fetch({{ createHookUrl }}, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      'url': url,
      'eventTypes': [
        // a payment on a subscription was made
        'PAYMENT.SALE.COMPLETED',
        // a payment on a subscription was refunded
        'PAYMENT.SALE.REFUNDED',
        // a payment on a subscription was reversed
        'PAYMENT.SALE.REVERSED',

        // user starts subscription process - it's not completed yet!
        'BILLING.SUBSCRIPTION.CREATED',
        // either user just subscribed to a plan - no payment yet or subscription resumed
        'BILLING.SUBSCRIPTION.ACTIVATED',
        // subscription expired
        'BILLING.SUBSCRIPTION.EXPIRED',
        // user subscription was canceled (from PayPal admin, REST api or from user side inside account)
        'BILLING.SUBSCRIPTION.CANCELLED',
        // subscription paused
        'BILLING.SUBSCRIPTION.SUSPENDED',
        // payment failed on subscription
        'BILLING.SUBSCRIPTION.PAYMENT.FAILED',
        // subscription is updated - how to do that? (like suspended, change of state? no)
        'BILLING.SUBSCRIPTION.UPDATED',

        //'PAYMENT.AUTHORIZATION.CREATED',
        //'PAYMENT.AUTHORIZATION.VOIDED',
        //'PAYMENT.CAPTURE.COMPLETED',
      ]
    }),
  });

  if (!response.ok) {
    log(component, await response.text(), true);
    return;
  }

  log(component, await response.json(), false);
}

function log(component, message, logToConsole) {
  if (logToConsole) {
    console.log(message);
  }

  document.querySelector(component).innerText = message;
}

</script>
{% endblock %}
{% block body %}
<div class="container">
  <article id="order" class="component">
    <h1> orders (one-time payments) </h1>
    <button data-currency="USD" data-amount=3>Chocolate Ice Cream $3</button>
    <button data-currency="USD" data-amount=3>Vanilla Ice Cream $3</button>
    <details open>
      <summary>order</summary>
      <code></code>
    </details>
  </article>

  <article id="subscription" class="component">
    <h1> subscriptions </h1>
    <p> For subscriptions, you first need to create a product, then a plan that uses that product.<br>
    Once you have a plan, you can subscribe. </p>
    <input id="planId" type="text"/>
    <button id="createSubscription">Subscribe to copilot</button>
    <details open>
      <summary>output</summary>
      <code></code>
    </details>
  </article>

  <article id="products" class="component">
    <h1> products </h1>
    <button id="createProduct">create product</button>
    <details open>
      <summary>products</summary>
      <code>loading...</code>
    </details>
  </article>

  <article id="plans" class="component">
    <h1> plans </h1>
    <input id="productId" type="text"/>
    <button id="createPlan">create plan</button>
    <details open>
      <code>loading...</code>
    </details>
  </article>

  <article id="webooks" class="component">
    <h1> webhooks </h1>
    <p> To receive notifications about PayPal events (new payments, subscriptions, etc...), you need to setup a webhook. </p>
    <input id="hookUrl" type="text"/>
    <button id="createHook">create webhook</button>
    <button id="deleteHook">delete webhook</button>
    <details open>
      <code>loading...</code>
    </details>
  </article>
</div>
{% endblock %}
